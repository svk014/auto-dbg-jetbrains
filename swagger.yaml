openapi: 3.0.3
info:
  title: JetBrains Debugger API
  description: REST API for accessing JetBrains IDE debugger functionality
  version: 0.2.0
  contact:
    name: Auto DBG JetBrains Plugin
    url: https://github.com/svk014/auto-dbg-jetbrains

servers:
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: '<add port here>'
        description: Dynamic port assigned by the plugin

paths:
  /api/debugger/frame/{depth}:
    get:
      x-tool-name: frame_at_depth
      summary: Get frame information at specific depth
      description: Retrieves frame information from the call stack at the specified depth
      operationId: getFrame
      tags:
        - Frame Operations
      parameters:
        - name: depth
          in: path
          required: true
          description: The depth of the frame in the call stack (0 = current frame)
          schema:
            type: integer
            minimum: 0
            example: 0
      responses:
        '200':
          description: Frame information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Successful frame retrieval
                  value:
                    success: true
                    data:
                      methodName: "calculateSum"
                      lineNumber: 42
                      filePath: "/src/main/java/com/example/Calculator.java"
                    error: null
                    timestamp: 1722556800000
                no_frame:
                  summary: No frame at depth
                  value:
                    success: false
                    data: null
                    error: "No frame available at depth 5"
                    timestamp: 1722556800000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/variables/{frameIndex}:
    get:
      x-tool-name: variables_for_frame
      summary: Get variables for a specific frame
      description: Retrieves all variables visible in the specified frame
      operationId: getVariables
      tags:
        - Variable Operations
      parameters:
        - name: frameIndex
          in: path
          required: true
          description: The index of the frame to get variables from
          schema:
            type: integer
            minimum: 0
            example: 0
      responses:
        '200':
          description: Variables retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Successful variable retrieval
                  value:
                    success: true
                    data: {}
                    error: null
                    timestamp: 1722556800000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/evaluate:
    post:
      x-tool-name: evaluate_expression
      summary: Evaluate an expression
      description: Evaluates a code expression in the context of the specified frame
      operationId: evaluateExpression
      tags:
        - Expression Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expression:
                  type: string
                  description: The expression to evaluate
                  example: "count + 1"
                frameIndex:
                  type: integer
                  description: The frame index in which to evaluate the expression
                  default: 0
                  example: 0
      responses:
        '200':
          description: Expression evaluated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Successful evaluation
                  value:
                    success: true
                    data:
                      result: 42
                      expression: "count + 1"
                    error: null
                    timestamp: 1722556800000
        '400':
          description: Bad request - invalid expression
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/trace_breakpoint:
    post:
      x-tool-name: trace_breakpoint
      summary: Automated Breakpoint Tracing for Program Analysis
      description: |
        **Advanced automated debugging tool for non-intrusive program analysis.**
        
        This API enables sophisticated debugging workflows by automatically:
        
        **Core Capabilities:**
        - Sets a temporary breakpoint at the specified file and line
        - Automatically captures program execution when the breakpoint is hit
        - Evaluates custom expressions in the context of each breakpoint hit
        - Collects structured execution traces across multiple hits
        - Manages breakpoint lifecycle (setup, monitoring, cleanup)
        
        **Automated Workflow:**
        1. Temporarily disables user breakpoints to prevent interference
        2. Sets a breakpoint at the target location
        3. Monitors program execution and waits for breakpoint hits
        4. Evaluates the provided expression each time the breakpoint triggers
        5. Collects trace data showing how values change over time
        6. Automatically removes the temporary breakpoint
        7. Restores user breakpoints to their original state
        
        **Use Cases for Automated Debugging:**
        - **Variable Tracking**: Monitor how variables change across loop iterations
        - **Condition Analysis**: Track when specific conditions become true/false
        - **Performance Profiling**: Count executions or measure timing
        - **Bug Reproduction**: Automatically collect data when certain code paths execute
        - **Regression Testing**: Verify consistent behavior across code changes
        - **AI-Assisted Debugging**: Gather systematic program state data for analysis
        
        **Non-Intrusive Design:**
        - Operates without modifying source code
        - Preserves existing debugging session state
        - Handles timeout scenarios gracefully
        - Provides structured output for programmatic analysis
        
        **Example Scenario:**
        To track how a counter variable changes in a loop, set the breakpoint inside the loop
        and use expression "counter + index" to see the progression across iterations.
      operationId: traceBreakpoint
      tags:
        - Breakpoint Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file
                - line
                - expression
              properties:
                file:
                  type: string
                  description: The full file path where to set the breakpoint
                  example: "/Users/user1/Documents/personal/SomeJavaProject/src/main/java/com/example/Calculator.java"
                line:
                  type: integer
                  description: The line number where to set the breakpoint (1-based)
                  minimum: 1
                  example: 42
                breakpointType:
                  type: string
                  description: The type of breakpoint to set
                  default: "LINE"
                  example: "LINE"
                lambdaOrdinal:
                  type: integer
                  description: Optional lambda ordinal for breakpoints within lambda expressions
                  minimum: 0
                  example: 0
                expression:
                  type: string
                  description: |
                    The expression to evaluate at each breakpoint hit. Can access local variables,
                    method parameters, and object fields visible at the breakpoint location.
                    Examples: "count", "arr.length", "x + y", "user.getName()"
                  example: "count + 1"
                maxHits:
                  type: integer
                  description: Maximum number of breakpoint hits to trace before stopping
                  default: 10
                  minimum: 1
                  maximum: 100
                  example: 10
                timeoutMs:
                  type: integer
                  description: Timeout in milliseconds to wait for each breakpoint hit
                  default: 30000
                  minimum: 1000
                  maximum: 300000
                  example: 30000
      responses:
        '200':
          description: Trace completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Trace completed
                  value:
                    success: true
                    data:
                      hits: 3
                      traces:
                        - hitNumber: 1
                          location: "/src/main/java/com/example/Calculator.java:42"
                          frameIndex: 0
                          expressionResult: 43
                        - hitNumber: 2
                          location: "/src/main/java/com/example/Calculator.java:42"
                          frameIndex: 0
                          expressionResult: 44
                        - hitNumber: 3
                          location: "/src/main/java/com/example/Calculator.java:42"
                          frameIndex: 0
                          expressionResult: 45
                      breakpointRemoved: true
                    error: null
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/state:
    get:
      x-tool-name: debugger_state
      summary: Get current debugger state
      description: Retrieves the current state of the debugger including connection status, session information, and current position if paused
      operationId: getDebuggerState
      tags:
        - Debugger State
      responses:
        '200':
          description: Debugger state retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                paused:
                  summary: Debugger paused at breakpoint
                  value:
                    success: true
                    data:
                      status: "PAUSED"
                      sessionName: "Main"
                      currentPosition:
                        methodName: "calculateSum"
                        lineNumber: 42
                        filePath: "/src/main/java/com/example/Calculator.java"
                        className: "com.example.Calculator"
                      isConnected: true
                      availableSessions: ["Main"]
                    error: null
                    timestamp: 1722556800000
                running:
                  summary: Debugger running
                  value:
                    success: true
                    data:
                      status: "RUNNING"
                      sessionName: "Main"
                      currentPosition: null
                      isConnected: true
                      availableSessions: ["Main"]
                    error: null
                    timestamp: 1722556800000
                not_connected:
                  summary: No debugger session connected
                  value:
                    success: true
                    data:
                      status: "NOT_CONNECTED"
                      sessionName: null
                      currentPosition: null
                      isConnected: false
                      availableSessions: ["Main", "Test Session"]
                    error: null
                    timestamp: 1722556800000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/step/over:
    post:
      x-tool-name: step_over_exec
      summary: Step over the current line
      description: |
        Executes the current line and pauses at the next line in the same method or the calling method.
        
        **Step Over Behavior:**
        - If the current line contains a method call, the entire method is executed without stepping into it
        - Execution pauses at the next line in the current method
        - If the current line is the last line of a method, execution pauses at the calling method
        - Maintains the current debugging context and variable scope
        
        **Use Cases:**
        - Skip over method calls you don't want to debug
        - Move through code line by line within the current method
        - Quickly execute utility or library method calls
        
        **Requirements:**
        - Debugger must be connected to a session
        - Execution must be currently paused (at a breakpoint or after a previous step)
        
        This operation resumes execution temporarily and will pause again at the next appropriate line.
      operationId: stepOver
      tags:
        - Execution Control
      responses:
        '200':
          description: Step over command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Step over completed
                  value:
                    success: true
                    data:
                      message: "Step over executed successfully"
                      action: "STEP_OVER"
                    error: null
                    timestamp: 1722556800000
        '400':
          description: Bad request - debugger not in valid state for stepping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                not_paused:
                  summary: Debugger not paused
                  value:
                    success: false
                    data: null
                    error: "Cannot step over: debugger is not paused"
                    timestamp: 1722556800000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/step/into:
    post:
      x-tool-name: step_into_exec
      summary: Step into the current line
      description: |
        Steps into method calls on the current line, allowing detailed debugging of called methods.
        
        **Step Into Behavior:**
        - If the current line contains a method call, execution pauses at the first line of the called method
        - If the current line doesn't contain method calls, behaves like step over
        - Allows debugging of nested method calls and constructor calls
        - Preserves full call stack context for navigation
        
        **Use Cases:**
        - Debug the implementation of a specific method call
        - Trace execution flow through multiple method layers
        - Investigate issues within called methods
        - Understand complex object initialization or constructor behavior
        
        **Requirements:**
        - Debugger must be connected to a session
        - Execution must be currently paused
        - Source code must be available for the method being stepped into
        
        This operation is essential for deep debugging and understanding code execution flow.
      operationId: stepInto
      tags:
        - Execution Control
      responses:
        '200':
          description: Step into command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Step into completed
                  value:
                    success: true
                    data:
                      message: "Step into executed successfully"
                      action: "STEP_INTO"
                    error: null
                    timestamp: 1722556800000
        '400':
          description: Bad request - debugger not in valid state for stepping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/step/out:
    post:
      x-tool-name: step_out_exec
      summary: Step out of the current method
      description: |
        Completes execution of the current method and pauses at the calling method.
        
        **Step Out Behavior:**
        - Executes all remaining lines in the current method
        - Pauses at the line in the calling method that made the method call
        - Returns to the previous level in the call stack
        - Useful for quickly exiting from deep method calls
        
        **Use Cases:**
        - Exit from a method you've finished debugging
        - Return to a higher level in the call stack
        - Skip the remaining execution of a long method
        - Navigate back to the calling context after investigating a method
        
        **Requirements:**
        - Debugger must be connected to a session
        - Execution must be currently paused
        - Must not be at the top level of the call stack
        
        If already at the main method or top-level, this may continue execution until the next breakpoint.
      operationId: stepOut
      tags:
        - Execution Control
      responses:
        '200':
          description: Step out command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Step out completed
                  value:
                    success: true
                    data:
                      message: "Step out executed successfully"
                      action: "STEP_OUT"
                    error: null
                    timestamp: 1722556800000
        '400':
          description: Bad request - debugger not in valid state for stepping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/debugger/continue:
    post:
      x-tool-name: continue_execution
      summary: Continue program execution
      description: |
        Resumes program execution from the current paused state until the next breakpoint or program termination.
        
        **Continue Execution Behavior:**
        - Resumes normal program flow from the current position
        - Execution continues until it hits another breakpoint, encounters an exception, or the program terminates
        - All active breakpoints remain enabled and functional
        - Variables and program state continue to change during execution
        
        **Use Cases:**
        - Resume normal program flow after examining variables or call stack
        - Continue to the next breakpoint in the execution path
        - Complete program execution after debugging specific sections
        - Test program behavior with current variable states
        
        **Important Notes:**
        - After continuing, the debugger state will change to "RUNNING" until the next pause
        - If no more breakpoints are hit, the program may complete execution
        - Any breakpoints set in the execution path will still trigger
        - Use the `/api/debugger/state` endpoint to check if execution has paused again
        
        **Requirements:**
        - Debugger must be connected to a session
        - Execution must be currently paused
      operationId: continueExecution
      tags:
        - Execution Control
      responses:
        '200':
          description: Continue command executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Continue execution started
                  value:
                    success: true
                    data:
                      message: "Program execution resumed"
                      action: "CONTINUE"
                      status: "RUNNING"
                    error: null
                    timestamp: 1722556800000
        '400':
          description: Bad request - debugger not in valid state for continuing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                not_paused:
                  summary: Debugger not paused
                  value:
                    success: false
                    data: null
                    error: "Cannot continue: debugger is not paused"
                    timestamp: 1722556800000
                not_connected:
                  summary: No session connected
                  value:
                    success: false
                    data: null
                    error: "Cannot continue: no debugger session connected"
                    timestamp: 1722556800000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

components:
  schemas:
    ApiResponse:
      type: object
      description: Generic API response wrapper
      required:
        - success
        - timestamp
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
          example: true
        data:
          nullable: true
          description: The response data (null on error)
        error:
          type: string
          nullable: true
          description: Error message (null on success)
          example: null
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp when the response was generated
          example: 1722556800000

    FrameResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/FrameInfo'

    VariablesResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              nullable: true
              type: object
              additionalProperties: true
              description: Variable data as key-value pairs

    BreakpointInfo:
      type: object
      description: Information about a debugger breakpoint
      required:
        - success
        - filePath
        - lineNumber
        - message
      properties:
        success:
          type: boolean
          description: Whether the breakpoint operation was successful
          example: true
        filePath:
          type: string
          description: The file path of the breakpoint
          example: "/src/main/java/com/example/Calculator.java"
        lineNumber:
          type: integer
          minimum: 1
          description: The line number of the breakpoint
          example: 42
        condition:
          type: string
          nullable: true
          description: Optional condition for the breakpoint
          example: "count > 10"
        message:
          type: string
          description: Status message about the breakpoint operation
          example: "Breakpoint set successfully"

    FrameInfo:
      type: object
      description: Information about a stack frame
      required:
        - methodName
        - lineNumber
        - filePath
      properties:
        methodName:
          type: string
          description: Name of the method in this frame
          example: "calculateSum"
        lineNumber:
          type: integer
          description: Current line number in the frame
          example: 42
        filePath:
          type: string
          description: Full path to the source file
          example: "/src/main/java/com/example/Calculator.java"

    OperationResult:
      type: object
      description: Result of a generic operation
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        message:
          type: string
          description: Description of the operation result
          example: "Operation completed successfully"
        details:
          type: object
          additionalProperties:
            type: string
          description: Additional details about the operation
          example: {}

tags:
  - name: Frame Operations
    description: Operations related to stack frames
  - name: Variable Operations
    description: Operations for accessing variable values
  - name: Breakpoint Operations
    description: Operations for managing breakpoints
  - name: Expression Operations
    description: Operations for evaluating expressions
  - name: Debugger State
    description: Operations for retrieving the debugger's current state
  - name: Execution Control
    description: Operations for controlling program execution (step over, step into, etc.)
